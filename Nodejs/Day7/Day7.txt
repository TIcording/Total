auth: 로그인 이후 인증
노드나 장고도 마찬가지
1. 세션, 쿠키
    client - browser
    server - computer
    클라이언트가 서버로 페이지를 요청하여 페이지를 리턴 받을 때 사용
    클라이언트가 서버로 페이지를 요청 했을 때
    리퀘스트 객체가 만들어짐
    서버 메모리에 사용자가 들어온 것을 인지하고 세션 아이디라는 유일한 값을 부여
    절대 중복 불가
    이후 서버에서 클라이언트로 브라우저 저장소에 세션 아이디와 동일한 내용, 추가적으로 필요한 내용을
    다운 받게 함
    -> 그 다운 받은 파일을 쿠키라고 함
    이후 req와 res를 끊음
    세션 : 필요한 정보들

    쿠키 : 세션을 모아논 파일들

    쿠키가 생기고 난 뒤 req 시 같이 서버에 보냄
    서버에서 확인 -> 세션 확인 -> 다시 쿠키 정보를 보내지 않고 유지
    브라우저를 끄고 재부팅하면 쿠키 정보가 사라짐
    로그인 -> 서버의 DB에서 확인 -> session ID 아래에 변수(객체)를 만듬
    userID
    name
    point 등의 값을 저장 -> 이 값이 있는지에 따라 로그인 되어있는지를 판단
    전통적인 웹 개발방식
    장점 :  개발이 편함, 이미 준비되어 있는 세션과 쿠키를 사용
            보안이 우수
    단점 :  세션 아이디를 만들게 되면 파일로 저장하거나 DB에 저장하여 메모리 저장 해결
            서버나 DB를 증설해야 하며 동기화 시켜야 함
            그리고 메모리도 동기화를 시켜야 함 -> 1번 서버에 들어가게 되면 세션 아이디를 발급받으나
            2번 서버에 들어가게 되면 또 다시 세션 아이디를 발급받아야 함
2. JwT

Jason Web Token

    Header      어떤 알고리즘을 썻는지 (어떤 암호화를 시켯는지)
    payload     보내고 싶은내용
    signature   데이터 인코딩 방법