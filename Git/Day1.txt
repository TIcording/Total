Git
Github와 다름
버전관리 시스템의 종류
✔ 버전관리
여러 파일을 하나의 버전으로 묶어 관리하는 것
버전관리 시스템의 종류

1. 클라이언트 - 서버 모델
    - 하나의 중앙 서버로 여러 클라이언트들이 각자 필요한 것만 가져와서 작업을 하고 다시 중앙 서버로 보내서 통합하는 방식
    - CVS, SVN
2. 분산 모델
    - 하나의 중앙 서버가 존재하지만, 여러 클라이언트들은 각자의 컴퓨터 저장소에 전체 사본을 가지고 작업하는 방식
    - Git

Git의 장점
1. 동시에 작업하는 사람들과 소스코드를 주고받을 필요가 없음
2. 같은 파일을 여러명이 동시에 병렬 개발이 가능
3. 변동 과정을 체계적으로 관리할 수 있고, 언제든지 지난 시점의 버전으로 되돌릴 수 있음
4. 인터넷이 연결되지 않은 곳에서도 개발을 진행할 수 있고 중앙 서버의 데이터가 유실되어도 다시 복구할 수 있음

Git 설치
1. 구글에서 git 설치 검색
https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%84%A4%EC%B9%98
2. 왼쪽 메뉴에서 Download 클릭
3. 모니터에 있는 버전을 클릭
4. 64-bit Git for Windows Setup. 설치 (기본설정 설치)


Git 명령어
1. 프로젝트 디렉토리 내에 로컬 저장소를 생성
    git init


2. git 버전 관리할 파일을 선택(stage에 올림)
    git add inext.html

3. 하나의 버전으로 만들기
    git commit -m "index.html을 커밋"


처음쓰면 이런식의 에러가뜸
✔만약 아래와 같이 에러가 발생한 경우
    Author identity unknown



*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'Administrator@DESKTOP-HUJUVSS.(none)')

C:\Song\Git\test>

아래 명령어를 입력하여 해결
git config --global user.email "이메일 주소"
git config --global user.name "이름"


✔이메일을 잘 못 입력한 경우
    git config --global user.email "변경할 이메일"

✔ 확인
    git config user.email

✔ 로그 확인    
    git log
    
✔ README.md
- 깃허브에 업로드시 프로젝트 메인 설명글로 사용
- 마크다운 문법으로 작성


    1. 제목
        #제목 <h1></h1>
        ##제목 <h2></h2>
        ...
        ###### 제목 <h6></h6>


    2. 강조
        *이텔릭체* 또는 _이텔릭채_
        **볼드체**
        **_이텔릭체와 볼드체를 동시에_**
        ~~취소선~~
        <ul>밑줄</ul>

    3. 목록
        순서가 필요할 떄
        1. 순서가 필요한 목록
        - 순서가 필요하지 않은 목록

    4. 링크
        [클릭할 문자열](URL)
        예) [google](https://google.com)

    5. 코드작성
    ```
        프로그램 코드 작성하기
    ```

5. 여러 파일을 함께 선택(stage에 현재 디렉토리에 있는 변화된 모든 파일을 선택)
    git add .

6. 선택된 여러 파일을 커밋
    - 커밋이란? -> 로컬 시스템에서 파일을 수정/생성/삭제하고 원격 저장소에 반영할 파일들을 선별하는것 (버전 만드는 것)
    - 로컬 저장소에 변경 사항을 저장하는데 사용
    - 파일이 변경될 때 변경 사항은 자동으로 저장되지 않음
    - Git에게 새 커밋을 생성하여 변경 사항을 저장하도록 지시

    git commit -m "현재 디렉토리에 있는 모든 파일을 커밋"

깃 허브(Git Hub)
- https://github.com/
- git으로 버전 관리한 코드를 업로드 할 수 있는 클라우드 서비스
- 단순히 저장만 하는 것이 아니라 유저들과 함께 코드를 공유하고 온라인으로 하나의프로젝트를 개발할 수 있게 해줌

7. 깃허브 가입 후 repository 만들기
    Create repository 버튼을 클릭하여 생성

8. 로컬 저장소에서 github 저장소 주소를 설정
    git remote add origin1 https://github.com/TIcording/test1.git
    git remote add origin2 https://github.com/TIcording/test2.git

    git remote add origin https://github.com/TIcording/test.git

9. 생성한 커밋(버전들)들을 github로 전송(푸시)
    git push -u origin master

origin : Repository를 구별하는 계정명
master : Repository 에서 구별되는 브랜치명

    -u : upstream 

✔업스트림
- 원격 저장소와 로컬 브랜치가 추적하는 브랜치를 의미
- 기본적으로 origin/master 브랜치를 추적함


github DESKTOP 이동
https://desktop.github.com/






